//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.13.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace AspirePlugin.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:13</p>
  /// </summary>
  public class AspirePluginModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdCall<SessionHostModel, Unit> StartSessionHost => _StartSessionHost;
    
    //private fields
    [NotNull] private readonly RdCall<SessionHostModel, Unit> _StartSessionHost;
    
    //primary constructor
    private AspirePluginModel(
      [NotNull] RdCall<SessionHostModel, Unit> startSessionHost
    )
    {
      if (startSessionHost == null) throw new ArgumentNullException("startSessionHost");
      
      _StartSessionHost = startSessionHost;
      BindableChildren.Add(new KeyValuePair<string, object>("startSessionHost", _StartSessionHost));
    }
    //secondary constructor
    internal AspirePluginModel (
    ) : this (
      new RdCall<SessionHostModel, Unit>(SessionHostModel.Read, SessionHostModel.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => -5031649830046048687L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(JetBrains.Rider.Model.IdeRoot), JetBrains.Rider.Model.IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("AspirePluginModel (");
      using (printer.IndentCookie()) {
        printer.Print("startSessionHost = "); _StartSessionHost.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionAspirePluginModelEx
   {
    public static AspirePluginModel GetAspirePluginModel(this JetBrains.Rider.Model.Solution solution)
    {
      return solution.GetOrCreateExtension("aspirePluginModel", () => new AspirePluginModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspirePluginModel.kt:14</p>
  /// </summary>
  public sealed class SessionHostModel : IPrintable, IEquatable<SessionHostModel>
  {
    //fields
    //public fields
    public bool UnderDebugger {get; private set;}
    
    //private fields
    //primary constructor
    public SessionHostModel(
      bool underDebugger
    )
    {
      UnderDebugger = underDebugger;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out bool underDebugger)
    {
      underDebugger = UnderDebugger;
    }
    //statics
    
    public static CtxReadDelegate<SessionHostModel> Read = (ctx, reader) => 
    {
      var underDebugger = reader.ReadBool();
      var _result = new SessionHostModel(underDebugger);
      return _result;
    };
    
    public static CtxWriteDelegate<SessionHostModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.UnderDebugger);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((SessionHostModel) obj);
    }
    public bool Equals(SessionHostModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return UnderDebugger == other.UnderDebugger;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + UnderDebugger.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("SessionHostModel (");
      using (printer.IndentCookie()) {
        printer.Print("underDebugger = "); UnderDebugger.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
