//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.12.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace AspireSessionHost.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:16</p>
  /// </summary>
  public class AspireSessionHostModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableMap<string, SessionModel> Sessions => _Sessions;
    [NotNull] public ISource<AspireSessionHost.Generated.ProcessStarted> ProcessStarted => _ProcessStarted;
    [NotNull] public ISource<AspireSessionHost.Generated.ProcessTerminated> ProcessTerminated => _ProcessTerminated;
    [NotNull] public ISource<AspireSessionHost.Generated.LogReceived> LogReceived => _LogReceived;
    [NotNull] public IRdEndpoint<Unit, TraceNode[]> GetTraceNodes => _GetTraceNodes;
    
    //private fields
    [NotNull] private readonly RdMap<string, SessionModel> _Sessions;
    [NotNull] private readonly RdSignal<AspireSessionHost.Generated.ProcessStarted> _ProcessStarted;
    [NotNull] private readonly RdSignal<AspireSessionHost.Generated.ProcessTerminated> _ProcessTerminated;
    [NotNull] private readonly RdSignal<AspireSessionHost.Generated.LogReceived> _LogReceived;
    [NotNull] private readonly RdCall<Unit, TraceNode[]> _GetTraceNodes;
    
    //primary constructor
    private AspireSessionHostModel(
      [NotNull] RdMap<string, SessionModel> sessions,
      [NotNull] RdSignal<AspireSessionHost.Generated.ProcessStarted> processStarted,
      [NotNull] RdSignal<AspireSessionHost.Generated.ProcessTerminated> processTerminated,
      [NotNull] RdSignal<AspireSessionHost.Generated.LogReceived> logReceived,
      [NotNull] RdCall<Unit, TraceNode[]> getTraceNodes
    )
    {
      if (sessions == null) throw new ArgumentNullException("sessions");
      if (processStarted == null) throw new ArgumentNullException("processStarted");
      if (processTerminated == null) throw new ArgumentNullException("processTerminated");
      if (logReceived == null) throw new ArgumentNullException("logReceived");
      if (getTraceNodes == null) throw new ArgumentNullException("getTraceNodes");
      
      _Sessions = sessions;
      _ProcessStarted = processStarted;
      _ProcessTerminated = processTerminated;
      _LogReceived = logReceived;
      _GetTraceNodes = getTraceNodes;
      BindableChildren.Add(new KeyValuePair<string, object>("sessions", _Sessions));
      BindableChildren.Add(new KeyValuePair<string, object>("processStarted", _ProcessStarted));
      BindableChildren.Add(new KeyValuePair<string, object>("processTerminated", _ProcessTerminated));
      BindableChildren.Add(new KeyValuePair<string, object>("logReceived", _LogReceived));
      BindableChildren.Add(new KeyValuePair<string, object>("getTraceNodes", _GetTraceNodes));
    }
    //secondary constructor
    private AspireSessionHostModel (
    ) : this (
      new RdMap<string, SessionModel>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, SessionModel.Read, SessionModel.Write),
      new RdSignal<AspireSessionHost.Generated.ProcessStarted>(AspireSessionHost.Generated.ProcessStarted.Read, AspireSessionHost.Generated.ProcessStarted.Write),
      new RdSignal<AspireSessionHost.Generated.ProcessTerminated>(AspireSessionHost.Generated.ProcessTerminated.Read, AspireSessionHost.Generated.ProcessTerminated.Write),
      new RdSignal<AspireSessionHost.Generated.LogReceived>(AspireSessionHost.Generated.LogReceived.Read, AspireSessionHost.Generated.LogReceived.Write),
      new RdCall<Unit, TraceNode[]>(JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid, ReadTraceNodeArray, WriteTraceNodeArray)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<TraceNode[]> ReadTraceNodeArray = TraceNode.Read.Array();
    
    public static  CtxWriteDelegate<TraceNode[]> WriteTraceNodeArray = TraceNode.Write.Array();
    
    protected override long SerializationHash => -9018195661923713528L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(AspireSessionHostRoot), AspireSessionHostRoot.RegisterDeclaredTypesSerializers);
    }
    
    public AspireSessionHostModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("AspireSessionHostModel"));
      this.BindTopLevel(lifetime, protocol, "AspireSessionHostModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("AspireSessionHostModel (");
      using (printer.IndentCookie()) {
        printer.Print("sessions = "); _Sessions.PrintEx(printer); printer.Println();
        printer.Print("processStarted = "); _ProcessStarted.PrintEx(printer); printer.Println();
        printer.Print("processTerminated = "); _ProcessTerminated.PrintEx(printer); printer.Println();
        printer.Print("logReceived = "); _LogReceived.PrintEx(printer); printer.Println();
        printer.Print("getTraceNodes = "); _GetTraceNodes.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:17</p>
  /// </summary>
  public sealed class EnvironmentVariableModel : IPrintable, IEquatable<EnvironmentVariableModel>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public EnvironmentVariableModel(
      [NotNull] string key,
      [NotNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (value == null) throw new ArgumentNullException("value");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [NotNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<EnvironmentVariableModel> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = reader.ReadString();
      var _result = new EnvironmentVariableModel(key, value);
      return _result;
    };
    
    public static CtxWriteDelegate<EnvironmentVariableModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((EnvironmentVariableModel) obj);
    }
    public bool Equals(EnvironmentVariableModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("EnvironmentVariableModel (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:32</p>
  /// </summary>
  public sealed class LogReceived : IPrintable, IEquatable<LogReceived>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public bool IsStdErr {get; private set;}
    [NotNull] public string Message {get; private set;}
    
    //private fields
    //primary constructor
    public LogReceived(
      [NotNull] string id,
      bool isStdErr,
      [NotNull] string message
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (message == null) throw new ArgumentNullException("message");
      
      Id = id;
      IsStdErr = isStdErr;
      Message = message;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out bool isStdErr, [NotNull] out string message)
    {
      id = Id;
      isStdErr = IsStdErr;
      message = Message;
    }
    //statics
    
    public static CtxReadDelegate<LogReceived> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var isStdErr = reader.ReadBool();
      var message = reader.ReadString();
      var _result = new LogReceived(id, isStdErr, message);
      return _result;
    };
    
    public static CtxWriteDelegate<LogReceived> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.IsStdErr);
      writer.Write(value.Message);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((LogReceived) obj);
    }
    public bool Equals(LogReceived other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && IsStdErr == other.IsStdErr && Message == other.Message;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + IsStdErr.GetHashCode();
        hash = hash * 31 + Message.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("LogReceived (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("isStdErr = "); IsStdErr.PrintEx(printer); printer.Println();
        printer.Print("message = "); Message.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:38</p>
  /// </summary>
  public sealed class MetricKey : IPrintable, IEquatable<MetricKey>
  {
    //fields
    //public fields
    [NotNull] public string Scope {get; private set;}
    [NotNull] public string Name {get; private set;}
    
    //private fields
    //primary constructor
    public MetricKey(
      [NotNull] string scope,
      [NotNull] string name
    )
    {
      if (scope == null) throw new ArgumentNullException("scope");
      if (name == null) throw new ArgumentNullException("name");
      
      Scope = scope;
      Name = name;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string scope, [NotNull] out string name)
    {
      scope = Scope;
      name = Name;
    }
    //statics
    
    public static CtxReadDelegate<MetricKey> Read = (ctx, reader) => 
    {
      var scope = reader.ReadString();
      var name = reader.ReadString();
      var _result = new MetricKey(scope, name);
      return _result;
    };
    
    public static CtxWriteDelegate<MetricKey> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Scope);
      writer.Write(value.Name);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MetricKey) obj);
    }
    public bool Equals(MetricKey other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Scope == other.Scope && Name == other.Name;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Scope.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MetricKey (");
      using (printer.IndentCookie()) {
        printer.Print("scope = "); Scope.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:43</p>
  /// </summary>
  public sealed class MetricValue : IPrintable, IEquatable<MetricValue>
  {
    //fields
    //public fields
    [NotNull] public string ServiceName {get; private set;}
    [NotNull] public string Scope {get; private set;}
    [NotNull] public string Name {get; private set;}
    [CanBeNull] public string Description {get; private set;}
    [CanBeNull] public string Unit {get; private set;}
    public double Value {get; private set;}
    public long Timestamp {get; private set;}
    
    //private fields
    //primary constructor
    public MetricValue(
      [NotNull] string serviceName,
      [NotNull] string scope,
      [NotNull] string name,
      [CanBeNull] string description,
      [CanBeNull] string unit,
      double value,
      long timestamp
    )
    {
      if (serviceName == null) throw new ArgumentNullException("serviceName");
      if (scope == null) throw new ArgumentNullException("scope");
      if (name == null) throw new ArgumentNullException("name");
      
      ServiceName = serviceName;
      Scope = scope;
      Name = name;
      Description = description;
      Unit = unit;
      Value = value;
      Timestamp = timestamp;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string serviceName, [NotNull] out string scope, [NotNull] out string name, [CanBeNull] out string description, [CanBeNull] out string unit, out double value, out long timestamp)
    {
      serviceName = ServiceName;
      scope = Scope;
      name = Name;
      description = Description;
      unit = Unit;
      value = Value;
      timestamp = Timestamp;
    }
    //statics
    
    public static CtxReadDelegate<MetricValue> Read = (ctx, reader) => 
    {
      var serviceName = reader.ReadString();
      var scope = reader.ReadString();
      var name = reader.ReadString();
      var description = ReadStringNullable(ctx, reader);
      var unit = ReadStringNullable(ctx, reader);
      var value = reader.ReadDouble();
      var timestamp = reader.ReadLong();
      var _result = new MetricValue(serviceName, scope, name, description, unit, value, timestamp);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<MetricValue> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ServiceName);
      writer.Write(value.Scope);
      writer.Write(value.Name);
      WriteStringNullable(ctx, writer, value.Description);
      WriteStringNullable(ctx, writer, value.Unit);
      writer.Write(value.Value);
      writer.Write(value.Timestamp);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((MetricValue) obj);
    }
    public bool Equals(MetricValue other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ServiceName == other.ServiceName && Scope == other.Scope && Name == other.Name && Equals(Description, other.Description) && Equals(Unit, other.Unit) && Value == other.Value && Timestamp == other.Timestamp;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ServiceName.GetHashCode();
        hash = hash * 31 + Scope.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (Description != null ? Description.GetHashCode() : 0);
        hash = hash * 31 + (Unit != null ? Unit.GetHashCode() : 0);
        hash = hash * 31 + Value.GetHashCode();
        hash = hash * 31 + Timestamp.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("MetricValue (");
      using (printer.IndentCookie()) {
        printer.Print("serviceName = "); ServiceName.PrintEx(printer); printer.Println();
        printer.Print("scope = "); Scope.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
        printer.Print("unit = "); Unit.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
        printer.Print("timestamp = "); Timestamp.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:22</p>
  /// </summary>
  public sealed class ProcessStarted : IPrintable, IEquatable<ProcessStarted>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public long Pid {get; private set;}
    
    //private fields
    //primary constructor
    public ProcessStarted(
      [NotNull] string id,
      long pid
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      Pid = pid;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out long pid)
    {
      id = Id;
      pid = Pid;
    }
    //statics
    
    public static CtxReadDelegate<ProcessStarted> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var pid = reader.ReadLong();
      var _result = new ProcessStarted(id, pid);
      return _result;
    };
    
    public static CtxWriteDelegate<ProcessStarted> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.Pid);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ProcessStarted) obj);
    }
    public bool Equals(ProcessStarted other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && Pid == other.Pid;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Pid.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ProcessStarted (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("pid = "); Pid.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:27</p>
  /// </summary>
  public sealed class ProcessTerminated : IPrintable, IEquatable<ProcessTerminated>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public int ExitCode {get; private set;}
    
    //private fields
    //primary constructor
    public ProcessTerminated(
      [NotNull] string id,
      int exitCode
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      ExitCode = exitCode;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out int exitCode)
    {
      id = Id;
      exitCode = ExitCode;
    }
    //statics
    
    public static CtxReadDelegate<ProcessTerminated> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var exitCode = reader.ReadInt();
      var _result = new ProcessTerminated(id, exitCode);
      return _result;
    };
    
    public static CtxWriteDelegate<ProcessTerminated> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.ExitCode);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((ProcessTerminated) obj);
    }
    public bool Equals(ProcessTerminated other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && ExitCode == other.ExitCode;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + ExitCode.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("ProcessTerminated (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("exitCode = "); ExitCode.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:53</p>
  /// </summary>
  public sealed class SessionModel : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    [NotNull] public string ProjectPath {get; private set;}
    public bool Debug {get; private set;}
    [CanBeNull] public EnvironmentVariableModel[] Envs {get; private set;}
    [CanBeNull] public string[] Args {get; private set;}
    [CanBeNull] public string TelemetryServiceName {get; private set;}
    [NotNull] public IViewableMap<MetricKey, MetricValue> Metrics => _Metrics;
    
    //private fields
    [NotNull] private readonly RdMap<MetricKey, MetricValue> _Metrics;
    
    //primary constructor
    private SessionModel(
      [NotNull] string id,
      [NotNull] string projectPath,
      bool debug,
      [CanBeNull] EnvironmentVariableModel[] envs,
      [CanBeNull] string[] args,
      [CanBeNull] string telemetryServiceName,
      [NotNull] RdMap<MetricKey, MetricValue> metrics
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (projectPath == null) throw new ArgumentNullException("projectPath");
      if (metrics == null) throw new ArgumentNullException("metrics");
      
      Id = id;
      ProjectPath = projectPath;
      Debug = debug;
      Envs = envs;
      Args = args;
      TelemetryServiceName = telemetryServiceName;
      _Metrics = metrics;
      _Metrics.OptimizeNested = true;
      _Metrics.Async = true;
      BindableChildren.Add(new KeyValuePair<string, object>("metrics", _Metrics));
    }
    //secondary constructor
    public SessionModel (
      [NotNull] string id,
      [NotNull] string projectPath,
      bool debug,
      [CanBeNull] EnvironmentVariableModel[] envs,
      [CanBeNull] string[] args,
      [CanBeNull] string telemetryServiceName
    ) : this (
      id,
      projectPath,
      debug,
      envs,
      args,
      telemetryServiceName,
      new RdMap<MetricKey, MetricValue>(MetricKey.Read, MetricKey.Write, MetricValue.Read, MetricValue.Write)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<SessionModel> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var id = reader.ReadString();
      var projectPath = reader.ReadString();
      var debug = reader.ReadBool();
      var envs = ReadEnvironmentVariableModelArrayNullable(ctx, reader);
      var args = ReadStringArrayNullable(ctx, reader);
      var telemetryServiceName = ReadStringNullable(ctx, reader);
      var metrics = RdMap<MetricKey, MetricValue>.Read(ctx, reader, MetricKey.Read, MetricKey.Write, MetricValue.Read, MetricValue.Write);
      var _result = new SessionModel(id, projectPath, debug, envs, args, telemetryServiceName, metrics).WithId(_id);
      return _result;
    };
    public static CtxReadDelegate<EnvironmentVariableModel[]> ReadEnvironmentVariableModelArrayNullable = EnvironmentVariableModel.Read.Array().NullableClass();
    public static CtxReadDelegate<string[]> ReadStringArrayNullable = JetBrains.Rd.Impl.Serializers.ReadString.Array().NullableClass();
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    
    public static CtxWriteDelegate<SessionModel> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      writer.Write(value.Id);
      writer.Write(value.ProjectPath);
      writer.Write(value.Debug);
      WriteEnvironmentVariableModelArrayNullable(ctx, writer, value.Envs);
      WriteStringArrayNullable(ctx, writer, value.Args);
      WriteStringNullable(ctx, writer, value.TelemetryServiceName);
      RdMap<MetricKey, MetricValue>.Write(ctx, writer, value._Metrics);
    };
    public static  CtxWriteDelegate<EnvironmentVariableModel[]> WriteEnvironmentVariableModelArrayNullable = EnvironmentVariableModel.Write.Array().NullableClass();
    public static  CtxWriteDelegate<string[]> WriteStringArrayNullable = JetBrains.Rd.Impl.Serializers.WriteString.Array().NullableClass();
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("SessionModel (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("projectPath = "); ProjectPath.PrintEx(printer); printer.Println();
        printer.Print("debug = "); Debug.PrintEx(printer); printer.Println();
        printer.Print("envs = "); Envs.PrintEx(printer); printer.Println();
        printer.Print("args = "); Args.PrintEx(printer); printer.Println();
        printer.Print("telemetryServiceName = "); TelemetryServiceName.PrintEx(printer); printer.Println();
        printer.Print("metrics = "); _Metrics.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:63</p>
  /// </summary>
  public sealed class TraceNode : IPrintable, IEquatable<TraceNode>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    [NotNull] public string Name {get; private set;}
    [CanBeNull] public string ServiceName {get; private set;}
    [NotNull] public List<TraceNodeChild> Children {get; private set;}
    [NotNull] public List<TraceNodeAttribute> Attributes {get; private set;}
    
    //private fields
    //primary constructor
    public TraceNode(
      [NotNull] string id,
      [NotNull] string name,
      [CanBeNull] string serviceName,
      [NotNull] List<TraceNodeChild> children,
      [NotNull] List<TraceNodeAttribute> attributes
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      if (name == null) throw new ArgumentNullException("name");
      if (children == null) throw new ArgumentNullException("children");
      if (attributes == null) throw new ArgumentNullException("attributes");
      
      Id = id;
      Name = name;
      ServiceName = serviceName;
      Children = children;
      Attributes = attributes;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, [NotNull] out string name, [CanBeNull] out string serviceName, [NotNull] out List<TraceNodeChild> children, [NotNull] out List<TraceNodeAttribute> attributes)
    {
      id = Id;
      name = Name;
      serviceName = ServiceName;
      children = Children;
      attributes = Attributes;
    }
    //statics
    
    public static CtxReadDelegate<TraceNode> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var name = reader.ReadString();
      var serviceName = ReadStringNullable(ctx, reader);
      var children = ReadTraceNodeChildList(ctx, reader);
      var attributes = ReadTraceNodeAttributeList(ctx, reader);
      var _result = new TraceNode(id, name, serviceName, children, attributes);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<List<TraceNodeChild>> ReadTraceNodeChildList = TraceNodeChild.Read.List();
    public static CtxReadDelegate<List<TraceNodeAttribute>> ReadTraceNodeAttributeList = TraceNodeAttribute.Read.List();
    
    public static CtxWriteDelegate<TraceNode> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.Name);
      WriteStringNullable(ctx, writer, value.ServiceName);
      WriteTraceNodeChildList(ctx, writer, value.Children);
      WriteTraceNodeAttributeList(ctx, writer, value.Attributes);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<List<TraceNodeChild>> WriteTraceNodeChildList = TraceNodeChild.Write.List();
    public static  CtxWriteDelegate<List<TraceNodeAttribute>> WriteTraceNodeAttributeList = TraceNodeAttribute.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((TraceNode) obj);
    }
    public bool Equals(TraceNode other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && Name == other.Name && Equals(ServiceName, other.ServiceName) && Children.SequenceEqual(other.Children) && Attributes.SequenceEqual(other.Attributes);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (ServiceName != null ? ServiceName.GetHashCode() : 0);
        hash = hash * 31 + Children.ContentHashCode();
        hash = hash * 31 + Attributes.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("TraceNode (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("serviceName = "); ServiceName.PrintEx(printer); printer.Println();
        printer.Print("children = "); Children.PrintEx(printer); printer.Println();
        printer.Print("attributes = "); Attributes.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:76</p>
  /// </summary>
  public sealed class TraceNodeAttribute : IPrintable, IEquatable<TraceNodeAttribute>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public TraceNodeAttribute(
      [NotNull] string key,
      [NotNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (value == null) throw new ArgumentNullException("value");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [NotNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<TraceNodeAttribute> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = reader.ReadString();
      var _result = new TraceNodeAttribute(key, value);
      return _result;
    };
    
    public static CtxWriteDelegate<TraceNodeAttribute> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((TraceNodeAttribute) obj);
    }
    public bool Equals(TraceNodeAttribute other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("TraceNodeAttribute (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:71</p>
  /// </summary>
  public sealed class TraceNodeChild : IPrintable, IEquatable<TraceNodeChild>
  {
    //fields
    //public fields
    [NotNull] public string Id {get; private set;}
    public int ConnectionCount {get; private set;}
    
    //private fields
    //primary constructor
    public TraceNodeChild(
      [NotNull] string id,
      int connectionCount
    )
    {
      if (id == null) throw new ArgumentNullException("id");
      
      Id = id;
      ConnectionCount = connectionCount;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string id, out int connectionCount)
    {
      id = Id;
      connectionCount = ConnectionCount;
    }
    //statics
    
    public static CtxReadDelegate<TraceNodeChild> Read = (ctx, reader) => 
    {
      var id = reader.ReadString();
      var connectionCount = reader.ReadInt();
      var _result = new TraceNodeChild(id, connectionCount);
      return _result;
    };
    
    public static CtxWriteDelegate<TraceNodeChild> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
      writer.Write(value.ConnectionCount);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((TraceNodeChild) obj);
    }
    public bool Equals(TraceNodeChild other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id && ConnectionCount == other.ConnectionCount;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + ConnectionCount.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("TraceNodeChild (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("connectionCount = "); ConnectionCount.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
