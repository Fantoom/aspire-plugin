//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.12.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace AspireSessionHost.Generated
{
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:16</p>
  /// </summary>
  public class AspireSessionHostModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableMap<string, SessionModel> Sessions => _Sessions;
    
    //private fields
    [NotNull] private readonly RdMap<string, SessionModel> _Sessions;
    
    //primary constructor
    private AspireSessionHostModel(
      [NotNull] RdMap<string, SessionModel> sessions
    )
    {
      if (sessions == null) throw new ArgumentNullException("sessions");
      
      _Sessions = sessions;
      _Sessions.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("sessions", _Sessions));
    }
    //secondary constructor
    private AspireSessionHostModel (
    ) : this (
      new RdMap<string, SessionModel>(JetBrains.Rd.Impl.Serializers.ReadString, JetBrains.Rd.Impl.Serializers.WriteString, SessionModel.Read, SessionModel.Write)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => 4358981829313666140L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      
      serializers.RegisterToplevelOnce(typeof(AspireSessionHostRoot), AspireSessionHostRoot.RegisterDeclaredTypesSerializers);
    }
    
    public AspireSessionHostModel(Lifetime lifetime, IProtocol protocol) : this()
    {
      Identify(protocol.Identities, RdId.Root.Mix("AspireSessionHostModel"));
      this.BindTopLevel(lifetime, protocol, "AspireSessionHostModel");
    }
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("AspireSessionHostModel (");
      using (printer.IndentCookie()) {
        printer.Print("sessions = "); _Sessions.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:17</p>
  /// </summary>
  public sealed class EnvironmentVariableModel : IPrintable, IEquatable<EnvironmentVariableModel>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    [NotNull] public string Value {get; private set;}
    
    //private fields
    //primary constructor
    public EnvironmentVariableModel(
      [NotNull] string key,
      [NotNull] string value
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (value == null) throw new ArgumentNullException("value");
      
      Key = key;
      Value = value;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, [NotNull] out string value)
    {
      key = Key;
      value = Value;
    }
    //statics
    
    public static CtxReadDelegate<EnvironmentVariableModel> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var value = reader.ReadString();
      var _result = new EnvironmentVariableModel(key, value);
      return _result;
    };
    
    public static CtxWriteDelegate<EnvironmentVariableModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.Value);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((EnvironmentVariableModel) obj);
    }
    public bool Equals(EnvironmentVariableModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && Value == other.Value;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + Value.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("EnvironmentVariableModel (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("value = "); Value.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: AspireSessionHostModel.kt:22</p>
  /// </summary>
  public sealed class SessionModel : IPrintable, IEquatable<SessionModel>
  {
    //fields
    //public fields
    [NotNull] public string ProjectPath {get; private set;}
    public bool Debug {get; private set;}
    [CanBeNull] public EnvironmentVariableModel[] Envs {get; private set;}
    [CanBeNull] public string[] Args {get; private set;}
    
    //private fields
    //primary constructor
    public SessionModel(
      [NotNull] string projectPath,
      bool debug,
      [CanBeNull] EnvironmentVariableModel[] envs,
      [CanBeNull] string[] args
    )
    {
      if (projectPath == null) throw new ArgumentNullException("projectPath");
      
      ProjectPath = projectPath;
      Debug = debug;
      Envs = envs;
      Args = args;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string projectPath, out bool debug, [CanBeNull] out EnvironmentVariableModel[] envs, [CanBeNull] out string[] args)
    {
      projectPath = ProjectPath;
      debug = Debug;
      envs = Envs;
      args = Args;
    }
    //statics
    
    public static CtxReadDelegate<SessionModel> Read = (ctx, reader) => 
    {
      var projectPath = reader.ReadString();
      var debug = reader.ReadBool();
      var envs = ReadEnvironmentVariableModelArrayNullable(ctx, reader);
      var args = ReadStringArrayNullable(ctx, reader);
      var _result = new SessionModel(projectPath, debug, envs, args);
      return _result;
    };
    public static CtxReadDelegate<EnvironmentVariableModel[]> ReadEnvironmentVariableModelArrayNullable = EnvironmentVariableModel.Read.Array().NullableClass();
    public static CtxReadDelegate<string[]> ReadStringArrayNullable = JetBrains.Rd.Impl.Serializers.ReadString.Array().NullableClass();
    
    public static CtxWriteDelegate<SessionModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.ProjectPath);
      writer.Write(value.Debug);
      WriteEnvironmentVariableModelArrayNullable(ctx, writer, value.Envs);
      WriteStringArrayNullable(ctx, writer, value.Args);
    };
    public static  CtxWriteDelegate<EnvironmentVariableModel[]> WriteEnvironmentVariableModelArrayNullable = EnvironmentVariableModel.Write.Array().NullableClass();
    public static  CtxWriteDelegate<string[]> WriteStringArrayNullable = JetBrains.Rd.Impl.Serializers.WriteString.Array().NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((SessionModel) obj);
    }
    public bool Equals(SessionModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ProjectPath == other.ProjectPath && Debug == other.Debug && Equals(Envs, other.Envs) && Equals(Args, other.Args);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ProjectPath.GetHashCode();
        hash = hash * 31 + Debug.GetHashCode();
        hash = hash * 31 + (Envs != null ? Envs.ContentHashCode() : 0);
        hash = hash * 31 + (Args != null ? Args.ContentHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("SessionModel (");
      using (printer.IndentCookie()) {
        printer.Print("projectPath = "); ProjectPath.PrintEx(printer); printer.Println();
        printer.Print("debug = "); Debug.PrintEx(printer); printer.Println();
        printer.Print("envs = "); Envs.PrintEx(printer); printer.Println();
        printer.Print("args = "); Args.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
