package me.rafaelldi.aspire.run

import com.intellij.execution.configurations.ConfigurationTypeBase
import me.rafaelldi.aspire.AspireIcons

class AspireHostConfigurationType : ConfigurationTypeBase(
    "AspireHostConfiguration",
    "Aspire Host",
    "Aspire Host configuration",
    AspireIcons.RunConfig
) {

    private val factory = AspireHostConfigurationFactory(this)

    init {
        addFactory(factory)
    }

//    override fun isApplicable(kind: RunnableProjectKind) = kind == AspireRunnableProjectKinds.AspireHost
//
//    override fun tryCreateDefault(
//        project: Project,
//        lifetime: Lifetime,
//        projects: List<RunnableProject>,
//        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
//        runManager: RunManager
//    ): List<Pair<RunnableProject, RunnerAndConfigurationSettings>> {
//        val applicableProjects = projects.filter {
//            isApplicable(it.kind)
//                    && !runManager.hasConfigurationForNameAndTypeId(it.name, this.id)
//                    && !autoGeneratedRunConfigurationManager.hasRunConfigurationEverBeenGenerated(
//                it.projectFilePath,
//                it.kind
//            )
//        }
//
//        return applicableProjects.map {
//            val defaultSettings = runManager.createConfiguration(it.name, factory).apply {
//                (configuration as AspireHostConfiguration).parameters.setUpFromRunnableProject(it)
//                isActivateToolWindowBeforeRun = false
//                isFocusToolWindowBeforeRun = false
//            }
//            runManager.addConfiguration(defaultSettings)
//            autoGeneratedRunConfigurationManager.markProjectAsAutoGenerated(it.projectFilePath, it.kind)
//            it to defaultSettings
//        }
//    }

    override fun getHelpTopic() = "me.rafaelldi.aspire.run-config"
}