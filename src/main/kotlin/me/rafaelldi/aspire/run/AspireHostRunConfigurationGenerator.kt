package me.rafaelldi.aspire.run

import com.intellij.execution.RunManager
import com.intellij.execution.RunnerAndConfigurationSettings
import com.jetbrains.rider.model.RunnableProject
import com.jetbrains.rider.run.AutoGeneratedRunConfigurationManager
import com.jetbrains.rider.run.ExternalRunConfigurationGeneratorExtension
import com.jetbrains.rider.run.configurations.launchSettings.LaunchSettingsJsonService
import com.jetbrains.rider.run.configurations.RunConfigurationHelper.hasConfigurationForNameAndTypeId
import com.jetbrains.rider.run.configurations.launchSettings.LaunchSettingsJson

class AspireHostRunConfigurationGenerator : ExternalRunConfigurationGeneratorExtension {
    override fun generateConfigurations(
        runnableProjects: List<RunnableProject>,
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager,
        runManager: RunManager
    ): List<Pair<RunnableProject, RunnerAndConfigurationSettings>> {
        val applicableProjects = runnableProjects.filter {
            isApplicableProject(it, autoGeneratedRunConfigurationManager)
        }

        if (applicableProjects.isEmpty()) return emptyList()

        val result = mutableListOf<Pair<RunnableProject, RunnerAndConfigurationSettings>>()

        applicableProjects.forEach { runnableProject ->
            LaunchSettingsJsonService.loadLaunchSettings(runnableProject)?.profiles?.forEach { profile ->
                if (!profile.value.commandName.equals("Project", true))
                    return@forEach

                val configurationName = "${runnableProject.name}: ${profile.key}"
                if (runManager.hasConfigurationForNameAndTypeId(configurationName, AspireHostConfigurationType.ID))
                    return@forEach

                val configuration = generateConfigurationForProfile(
                    configurationName,
                    runnableProject,
                    profile.value,
                    runManager
                ) ?: return@forEach

                runManager.addConfiguration(configuration)
                autoGeneratedRunConfigurationManager.markProjectAsAutoGenerated(
                    runnableProject.projectFilePath,
                    runnableProject.kind
                )
                result.add(runnableProject to configuration)
            }
        }

        return result
    }

    private fun isApplicableProject(
        runnableProject: RunnableProject,
        autoGeneratedRunConfigurationManager: AutoGeneratedRunConfigurationManager
    ) = runnableProject.kind == AspireRunnableProjectKinds.AspireHost &&
            !autoGeneratedRunConfigurationManager.hasRunConfigurationEverBeenGenerated(
                runnableProject.projectFilePath,
                runnableProject.kind
            )

    private fun generateConfigurationForProfile(
        name: String,
        runnableProject: RunnableProject,
        profile: LaunchSettingsJson.Profile,
        runManager: RunManager
    ): RunnerAndConfigurationSettings? {
        val settings = runManager.createConfiguration(name, AspireHostConfigurationType::class.java)
        val configuration = settings.configuration as? AspireHostConfiguration ?: return null

        modifyParameters(configuration.parameters, runnableProject, profile)

        settings.apply {
            isActivateToolWindowBeforeRun = false
            isFocusToolWindowBeforeRun = false
        }

        return settings
    }

    private fun modifyParameters(
        parameters: AspireHostConfigurationParameters,
        runnableProject: RunnableProject,
        profile: LaunchSettingsJson.Profile
    ) {
        parameters.apply {
            projectFilePath = runnableProject.projectFilePath
            trackEnvs = true
            trackUrl = true
        }
    }
}